version: 2.1

jobs:
  build:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f9:fc:d7:c4:a9:17:3d:09:ee:03:d7:f9:6e:0d:f5:2b"
      - run:
          name: Write git tag name to text file "version"
          command: git describe --tags --always > version
      - run:
          name: Build Docker container
          command: docker build -t bids/${CIRCLE_PROJECT_REPONAME,,} .
          no_output_timeout: 6h
      - run:
          name: Save built Docker container to cache
          command: mkdir -p ~/docker; docker save "bids/${CIRCLE_PROJECT_REPONAME,,}" > ~/docker/image.tar
          no_output_timeout: 6h
      - save_cache:
          key: image_cache-{{ .Revision }}-{{ epoch }}
          paths:
            - "~/docker"


  test_preproc:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ .Revision }}
      - run:
          name: Download test data
          command: mkdir -p ${HOME}/downloads && wget -c -O ${HOME}/downloads/preproc.tar.gz "https://osf.io/d9gx7/download" && mkdir -p ${HOME}/data && tar xf ${HOME}/downloads/preproc.tar.gz -C ${HOME}/data
      - run:
          name: Make scratch directory
          command: mkdir ${HOME}/scratch
      - run:
          name: Load Docker image
          command: docker load -i ~/docker/image.tar
      - run:
          name: Print version
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp bids/${CIRCLE_PROJECT_REPONAME,,} --version
      - run:
          name: Run preproc-level analysis for all subjects
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data/BIDS:/bids_dataset -v ${HOME}/data:/outputs -v ${HOME}/scratch:/scratch bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs preproc --scratch /scratch
          no_output_timeout: 6h


  test_participant:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ .Revision }}
      - run:
          name: Download test data
          command: mkdir -p ${HOME}/downloads && wget -c -O ${HOME}/downloads/participant.tar.gz "https://osf.io/skc5x/download" && mkdir -p ${HOME}/data && tar xf ${HOME}/downloads/participant.tar.gz -C ${HOME}/data
      - run:
          name: Make scratch directory
          command: mkdir ${HOME}/scratch
      - run:
          name: Load Docker image
          command: docker load -i ~/docker/image.tar
      - run:
          name: Print version
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp bids/${CIRCLE_PROJECT_REPONAME,,} --version
      - run:
          name: Run participant-level analysis for solitary subject
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data/BIDS:/bids_dataset -v ${HOME}/data:/outputs -v ${HOME}/scratch:/scratch bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs participant --scratch /scratch --parcellation aal --streamlines 100000 --output_verbosity 3
          no_output_timeout: 6h


  test_group:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ .Revision }}
      - run:
          name: Download test data
          command: mkdir -p ${HOME}/downloads && wget -c -O ${HOME}/downloads/group.tar.gz "https://osf.io/6s8bx/download" && mkdir -p ${HOME}/data && tar xf ${HOME}/downloads/group.tar.gz -C ${HOME}/data
      - run:
          name: Make scratch directory
          command: mkdir ${HOME}/scratch
      - run:
          name: Load Docker image
          command: docker load -i ~/docker/image.tar
      - run:
          name: Print version
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp bids/${CIRCLE_PROJECT_REPONAME,,} --version
      - run:
          name: Run group-level analysis
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data/BIDS:/bids_dataset -v ${HOME}/data:/outputs -v ${HOME}/scratch:/scratch bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs group --scratch /scratch
          no_output_timeout: 6h

 
  deploy:
    docker:
      - image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ .Revision }}
      - run:
          name: Load Docker image
          command: docker load -i ~/docker/image.tar
      - run:
          name: Push "latest" tag to DockerHub
          command: if [[ -n "$DOCKER_PASS" ]]; then docker login -u $DOCKER_USER -p $DOCKER_PASS && docker push bids/${CIRCLE_PROJECT_REPONAME,,}:latest; fi
          no_output_timeout: 6h
      - run:
          name: Create named tag and push to DockerHub
          command: if [[ -n "$DOCKER_PASS" ]]; then docker login -u $DOCKER_USER -p $DOCKER_PASS && docker tag bids/${CIRCLE_PROJECT_REPONAME,,} bids/${CIRCLE_PROJECT_REPONAME,,}:$CIRCLE_TAG && docker push bids/${CIRCLE_PROJECT_REPONAME,,}:$CIRCLE_TAG; fi
          no_output_timeout: 6h

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - test_preproc:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - test_participant:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - test_group:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - deploy:
          requires:
            - build
            - test_preproc
            - test_participant
            - test_group
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
